name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest  
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.12'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-mock pytest-xdist pytest-benchmark
        pip install coverage[toml]
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 q --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 q --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Type check with mypy
      run: |
        pip install mypy types-colorama types-termcolor
        mypy q --ignore-missing-imports --strict-optional --no-implicit-reexport
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest tests/ -v -m "unit" --cov=q --cov-report=xml --cov-report=term-missing --tb=short
    
    - name: Run integration tests  
      run: |
        pytest tests/ -v -m "integration" --cov=q --cov-append --cov-report=xml --tb=short
    
    - name: Run backward compatibility tests
      run: |
        pytest tests/ -v -m "backward_compatibility" --cov=q --cov-append --cov-report=xml --tb=short
    
    - name: Run performance tests (basic)
      run: |
        pytest tests/ -v -m "performance and not slow" --tb=short
    
    - name: Run security tests
      run: |
        pytest tests/ -v -m "security" --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  extended-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov pytest-mock pytest-xdist pytest-benchmark
    
    - name: Run extended performance tests
      run: |
        pytest tests/ -v -m "performance" --tb=short --durations=10
    
    - name: Run stress tests
      run: |
        pytest tests/ -v -m "slow" --tb=short --maxfail=3
    
    - name: Performance benchmarking
      run: |
        pytest tests/test_performance_security.py::TestPerformanceBenchmarks::test_text_generation_response_time --benchmark-only --benchmark-sort=mean

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        pip install -e .
    
    - name: Format check with Black
      run: |
        black --check --diff q tests
    
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff q tests
    
    - name: Security check with Bandit
      run: |
        bandit -r q -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency security check with Safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install sphinx sphinx-rtd-theme
    
    - name: Test documentation build
      run: |
        # Create basic Sphinx documentation structure if it doesn't exist
        if [ ! -f "docs/conf.py" ]; then
          mkdir -p docs
          sphinx-quickstart -q -p "Q Library" -a "Tushar Khan" -v "1.4.0" --ext-autodoc --ext-viewcode --makefile --no-batchfile docs
        fi
        
        # Build documentation
        cd docs && make html
      continue-on-error: true

  compatibility:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest
    
    - name: Test CLI compatibility
      run: |
        # Test basic CLI functionality
        python -m q --help
        
        # Test that package can be imported
        python -c "import q; print('Package import successful')"
        python -c "from q import TextGenerator, ImageGenerator; print('Generator import successful')"
    
    - name: Test installation from source
      run: |
        # Test that package can be built and installed  
        pip install build
        python -m build
        pip install dist/*.whl --force-reinstall
        
        # Test installed package
        q --help
        python -c "import q; print(f'Installed version: {q.__version__}')"

  release-readiness:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, extended-tests, code-quality, compatibility]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov build twine
    
    - name: Run full test suite
      run: |
        pytest tests/ --cov=q --cov-report=term-missing --cov-fail-under=90
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Test package installation
      run: |
        pip install dist/*.whl --force-reinstall
        q --help
    
    - name: Generate test report
      run: |
        pytest tests/ --junitxml=test-results.xml --cov=q --cov-report=xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results.xml
          coverage.xml
      if: always()
    
    - name: Create release summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… All tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Code quality checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Compatibility verified" >> $GITHUB_STEP_SUMMARY
        echo "- âœ… Package build successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Ready for release! ðŸš€" >> $GITHUB_STEP_SUMMARY
name: Build and Release

on:
  push:
    tags:
      - 'v*' # only run on version tags

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # allow other builds to run if one build fails
      matrix:
        os: [ ubuntu-22.04, windows-latest, macos-latest ]

    steps:
      - name: Check out repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Define executable name
        shell: bash
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          PLATFORM="$(uname -s | tr '[:upper:]' '[:lower:]')"     # linux, darwin, windows
          ARCH="$(uname -m)"                                      # x86_64, arm64, etc.

          # Normalize OS names
          if [[ "$PLATFORM" == "darwin" ]]; then
            PLATFORM="macos"
          elif [[ "$PLATFORM" == "mingw"* || "$PLATFORM" == "msys"* || "$PLATFORM" == *"nt"* ]]; then
            PLATFORM="windows"
          fi

          EXECUTABLE_NAME="q-v${VERSION}-${PLATFORM}-${ARCH}"

          # Windows requires .exe extension
          if [[ "$PLATFORM" == "windows" ]]; then
            EXECUTABLE_NAME="${EXECUTABLE_NAME}.exe"
          fi

          echo "EXECUTABLE_NAME=$EXECUTABLE_NAME" >> $GITHUB_ENV

      - name: Build executable
        shell: bash
        run: |
          pyinstaller q --onefile --clean --noupx --name "$EXECUTABLE_NAME"

      - name: Test executable
        shell: bash
        run: |
          chmod +x dist/$EXECUTABLE_NAME
          ./dist/$EXECUTABLE_NAME -h

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXECUTABLE_NAME }}
          path: dist/${{ env.EXECUTABLE_NAME }}
  
  release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: build
    if: always() # allow other builds to release if one fails

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
